import logging

from fastapi import Depends

import sqlalchemy
from sqlalchemy.ext.asyncio import AsyncSession

from app.users import models as models_u, services as services_u, schemas as schemas_u
from app.categories import (
    models as models_c,
    services as services_c,
    schemas as schemas_c,
)
from app.offers import models as models_f, services as sevices_f, schemas as schemas_f
from core.settings import config as conf
from core.database import get_session
from core.database import event_listener


async def preload_db_main(db_session: AsyncSession):
    logger = logging.getLogger("uvicorn")
    await event_listener.open_listener_connection(logger, conf.ASYNCPG_DB_URL)
    await event_listener._PostgreListener__test__notify("test_main", "Ok")
    await __init_base_db(db_session)


async def __init_base_db(db_session: AsyncSession):
    try:
        await __init_user(db_session)
        await __init_categories(db_session)
        await __init_offers(db_session)
    except sqlalchemy.exc.IntegrityError:
        logging.getLogger("uvicorn").warning("cant init dbase, IntegrityError!")


async def __init_categories(db_session: AsyncSession):
    await __init_categories_carcass(db_session)
    await __init_categories_values(db_session)


async def __init_categories_carcass(db_session: AsyncSession):
    categories_to_create = [
        {
            "select_name": "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É",
            "is_root": True,
            "in_offer_name": "–ò–≥—Ä–∞",
            "admin_comment": "–í—ã–±–æ—Ä –∏–≥—Ä—ã",
            "is_last": False,
        },
        {
            "select_name": "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É",
            "is_root": False,
            "in_offer_name": "–¢–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
            "admin_comment": "–£—Å–ª—É–≥–∏ –¥–ª—è –∏–≥—Ä—ã BrawlStars",
            "is_last": False,
        },
        {
            "select_name": "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É",
            "is_root": False,
            "in_offer_name": "–¢–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
            "admin_comment": "–£—Å–ª—É–≥–∏ –¥–ª—è –∏–≥—Ä—ã CS2",
            "is_last": False,
        },
        {
            "select_name": "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É",
            "is_root": False,
            "in_offer_name": "–¢–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
            "admin_comment": "–£—Å–ª—É–≥–∏ –¥–ª—è –∏–≥—Ä—ã Dota2",
            "is_last": False,
        },
        {
            "select_name": "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–Ω–∏ –ë–ü",
            "is_root": False,
            "in_offer_name": "–£—Ä–æ–≤–Ω–∏ –ë–ü",
            "admin_comment": "–£—Ä–æ–≤–Ω–∏ –±–æ–µ–≤–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è BrawlStars",
            "is_last": True,
        },
        {
            "select_name": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏",
            "is_root": False,
            "in_offer_name": "–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏",
            "admin_comment": "–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∏–≥—Ä—ã",
            "is_last": False,
        },
        {
            "select_name": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª",
            "is_root": False,
            "in_offer_name": "–ù–æ–º–∏–Ω–∞–ª",
            "admin_comment": "–ù–æ–º–∏–Ω–∞–ª –≥–µ–º–æ–≤ –¥–ª—è –∏–≥—Ä—ã BrawlStars",
            "is_last": True,
        },
        {
            "select_name": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ú–ú–†",
            "is_root": False,
            "in_offer_name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ú–ú–†",
            "admin_comment": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ú–ú–† –¥–ª—è –∏–≥—Ä—ã Dota 2",
            "is_last": True,
        },
        {
            "select_name": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ELO",
            "is_root": False,
            "in_offer_name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ELO",
            "admin_comment": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ELO –¥–ª—è –∏–≥—Ä—ã CS2",
            "is_last": True,
        },
    ]
    carcass = await services_c.categories_carcass.get_all(db_seesion=db_session)
    if not carcass or conf.DROP_TABLES:
        for category_data in categories_to_create:
            await services_c.categories_carcass.create_category(
                db_session=db_session,
                author_id=1,
                obj_in=schemas_c.CategoryCarcassCreate(**category_data),
            )


async def __init_categories_values(db_session: AsyncSession):
    values_to_create = [
        # New category CS2
        {"carcass_id": 1, "value": "Counter-Strike 2", "next_carcass_id": 3}, # 1
        # Subcategory
        {"carcass_id": 3, "value": "–ë—É—Å—Ç ELO)", "next_carcass_id": 9}, # 2

        {"carcass_id": 9, "value": "25 ELO", "next_carcass_id": None, "is_offer_with_delivery": False}, # 3
        {"carcass_id": 9, "value": "50 ELO", "next_carcass_id": None, "is_offer_with_delivery": False}, # 4
        {"carcass_id": 9, "value": "100 ELO", "next_carcass_id": None, "is_offer_with_delivery": True}, # 5
        {"carcass_id": 9, "value": "200 ELO", "next_carcass_id": None, "is_offer_with_delivery": True}, # 6

        # New category Dota2
        {"carcass_id": 1, "value": "Dota 2", "next_carcass_id": 4}, # 7
        # Subcategory
        {"carcass_id": 4, "value": "–ë—É—Å—Ç —ç–º—ç–º—ç—Ä–∞—É)", "next_carcass_id": 8}, # 8

        {"carcass_id": 8, "value": "100 –ú–ú–†", "next_carcass_id": None, "is_offer_with_delivery": False}, # 9 
        {"carcass_id": 8, "value": "1000 –ú–ú–†", "next_carcass_id": None, "is_offer_with_delivery": False}, # 10
        {"carcass_id": 8, "value": "2000 –ú–ú–†", "next_carcass_id": None, "is_offer_with_delivery": True}, # 11
        {"carcass_id": 8, "value": "3000 –ú–ú–†", "next_carcass_id": None, "is_offer_with_delivery": True}, # 12

        # New category BrawlStars
        {"carcass_id": 1, "value": "Brawl Stars", "next_carcass_id": 2}, # 13
        # Subcategory
        {"carcass_id": 2, "value": "–ü–æ–∫—É–ø–∫–∞ –≥–µ–º–æ–≤", "next_carcass_id": 6}, # 14
        # Subcategory
        {"carcass_id": 2, "value": "–ë–æ–µ–≤–æ–π –ø—Ä–æ–ø—É—Å–∫", "next_carcass_id": 5}, # 15

        {"carcass_id": 6, "value": "Supersell ID", "next_carcass_id": 7}, # 16
        {"carcass_id": 6, "value": "–í—Å—Ç—Ä–µ—á–∞ –≤ –∂–∏–∑–Ω–∏", "next_carcass_id": 7}, # 17
        {"carcass_id": 6, "value": "–ß–µ—Ä–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ", "next_carcass_id": 7}, # 18

        {"carcass_id": 7, "value": "30 –ì–µ–º–æ–≤", "next_carcass_id": None, "is_offer_with_delivery": False}, # 19
        {"carcass_id": 7, "value": "170 –ì–µ–º–æ–≤", "next_carcass_id": None, "is_offer_with_delivery": False}, # 20
        {"carcass_id": 7, "value": "2000 –ì–µ–º–æ–≤", "next_carcass_id": None, "is_offer_with_delivery": False}, # 21
        
        {"carcass_id": 5, "value": "1 —É—Ä–æ–≤–µ–Ω—å –ë–ü", "next_carcass_id": None, "is_offer_with_delivery": True}, # 22
        {"carcass_id": 5, "value": "5 —É—Ä–æ–≤–Ω–µ–π –ë–ü", "next_carcass_id": None, "is_offer_with_delivery": True}, # 23
        {"carcass_id": 5, "value": "10 —É—Ä–æ–≤–Ω–µ–π –ë–ü", "next_carcass_id": None, "is_offer_with_delivery": True}, # 24
    ]

    values = await services_c.categories_values.get_all(db_session=db_session)
    if not values or conf.DROP_TABLES:
        for value_data in values_to_create:
            await services_c.categories_values.create_value(
                db_session=db_session,
                author_id=1,
                carcass_id=value_data["carcass_id"],
                value=schemas_c.ValueCreate(**value_data),
            )


async def __init_offers(db_session: AsyncSession):
    offers_to_create = [
        {
            "name": "CS2 50 elo without delivery üò¶",
            "description": "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è 50 elo –±–µ–∑ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏",
            "price": 1000,
            "count": 20,
            "category_value_ids": [1, 2, 4],
        },
        {
            "name": "CS2 100 elo with delivery üéâ",
            "description": "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è 100 elo —Å –∞–≤—Ç–æ–≤—ã–¥–∞—á–µ–π",
            "price": 1000,
            "count": 20,
            "category_value_ids": [1, 2, 5],
        },
        {
            "name": "Dota2 –±—É—Å—Ç 1000–º–º—Ä –±–µ–∑ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ ‚ú®",
            "description": "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –±—É—Å—Ç–∞ 1000–º–º—Ä –±–µ–∑ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏",
            "price": 50,
            "count": 50,
            "category_value_ids": [7, 8, 10],
        },
        {
            "name": "Dota2 –±—É—Å—Ç 2000–º–º—Ä —Å –∞–≤—Ç–æ–≤—ã–¥–∞—á–µ–π ‚ù§Ô∏è",
            "description": "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –±—É—Å—Ç–∞ 2000–º–º—Ä –∞–≤—Ç–æ–≤—ã–¥–∞—á–µ–π",
            "price": 50,
            "count": 50,
            "category_value_ids": [7, 8, 11],
        },
        {
            "name": "BrawStars gems without delivery ü§ç",
            "description": "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–º–æ–≤ –±–µ–∑ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏",
            "price": 100,
            "count": 5,
            "category_value_ids": [13, 14, 16, 19],
        },
        {
            "name": "BrawStars battle pass with delivery üò≠",
            "description": "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –±–ø —Å –∞–≤—Ç–æ–≤—ã–¥–∞—á–µ–π",
            "price": 100,
            "count": 5,
            "category_value_ids": [13, 15, 23],
        },
    ]

    offers = await sevices_f.get_mini_by_offset_limit(
        db_session=db_session, offset=0, limit=10
    )

    if not offers or conf.DROP_TABLES:
        for offer_data in offers_to_create:
            await sevices_f.create_offer(
                db_session=db_session,
                user_id=1,
                obj_in=schemas_f.CreateOffer(**offer_data),
            )


async def __init_user(db_session: AsyncSession):
    user: models_u.User = await services_u.get_by_email(
        db_session, email=conf.BASE_ADMIN_MAIL_LOGIN
    )

    if not user:
        user: models_u.User = await services_u.create_user(
            db_session=db_session,
            obj_in=schemas_u.UserSignUp(
                password=conf.BASE_ADMIN_MARKET_PASSWORD,
                email=conf.BASE_ADMIN_MAIL_LOGIN,
                username=conf.BASE_ADMIN_MARKET_LOGIN,
            ),
            additional_fields={"role_id": 3, "is_verified": True},
        )

    test_user: models_u.User = await services_u.get_by_email(
            db_session, email=conf.BASE_DEBUG_USER_EMAIL
        )
    if not test_user:
        test_user: models_u.User = await services_u.create_user(
            db_session=db_session,
            obj_in=schemas_u.UserSignUp(
                password=conf.BASE_DEBUG_USER_PASS,
                email=conf.BASE_DEBUG_USER_EMAIL,
                username=conf.BASE_DEBUG_USER_LOGIN,
            ),
            additional_fields={"role_id": 0, "is_verified": True},
        )
